@page "/R_Ticket"
@page "/R_Ticket/{TicketId:int}"
@inject HttpClient httpClient

<EditForm Model="Tickets" OnValidSubmit="Guardar" >
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Tickets</h3>
            </div>
            <div class=card-body>

                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Ticket Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value=" Tickets.TicketId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>


                <div class="mb-3">
                    <label class="form-label" for="Fecha"> Fecha:</label>
                    <InputDate @bind-Value=" Tickets.Fecha" class="form-control"style="max-width: 180px;" />
                    <ValidationMessage For="@(() => Tickets.Fecha)" />
                </div>

                <div class="mb-3"> Tickets
                    <label class="form-label" for="Solicitado Por">Solicitado Por:</label>
                    <InputText @bind-Value=" Tickets.SolicitadoPor" class="form-control"  />
                    <ValidationMessage For="@(() => Tickets.SolicitadoPor)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Asunto">Asunto</label>
                    <InputText @bind-Value=" Tickets.Asunto" class="form-control" />
                    <ValidationMessage For="@(() => Tickets.Asunto)" />
                </div>


                <div class="mb-3">
                    <label class="form-label" for="Descripcion">Descripci&oacute;n:</label>
                    <InputTextArea @bind-Value="Tickets.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() =>  Tickets.Descripcion)" />
                </div>


                    <fieldset class="border-success border border-0" >
                        <h3>Mensajes</h3>
                        <div>

                            @*Nombre *@
                            <div class="col-5">
                                <label>Emisor:</label>
                                <InputText class="form-control" @bind-Value="EmisorTicket"></InputText>
                            </div>

                            @*Mensaje *@
                            <div class="row">
                                <div class="col-5"  >
                                    <label>Mensaje</label>
                                    <InputTextArea class="form-control" @bind-Value="MensajeTicket"></InputTextArea>
                                </div>

                                @*Boton Agregar *@
                                <div class="col-5">
                                <br>
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle">
                                        <span class="oi oi-plus">Agregar</span>
                                    </button>
                                </div>
                            <hr />
                            <table class="table table-bordered table-light m-1" style="max-width: 1800px;">
                                <thead class="thead">
                                    <tr class="table">
                                        <th>Emisor</th>
                                        <th>Mensaje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var detalle in Tickets.TicketsDetalle)
                                    {
                                        <tr>
                                            <td>@detalle.Emisor</td>
                                            <td>@detalle.Mensaje</td>
                                            <td> <button  @onclick="@(() => RemoverDetalle(detalle))"><i class="oi oi-trash" />Remover</button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            
                            <div class="row justify-content-between" >
                                <div class="col-4">
                                    <label>Cantidad de Mensajes</label>
                                    <div class="input-group mb-3" style="max-width: 50px;">
                                        <span class="form-control">@Tickets.TicketsDetalle.Count()</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                            <hr />
                    </div>  
                    </fieldset>

            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary"  @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code{
    
public string VD {get; set;}
[Parameter]

public int TicketId {get; set;}
public Tickets Tickets {get; set;} = new Tickets();

public string MensajeTicket {get; set;} = string.Empty;

public string EmisorTicket { get; set; } = string.Empty;

public string Mensaje { get; set; } = string.Empty;


 protected override async Task OnInitializedAsync()
    {

        if (TicketId > 0)
        {
            this.Tickets.TicketId = TicketId;
            await Buscar();
        }
    }
    
    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync($"api/Tickets" ,Tickets);
        if (!response.IsSuccessStatusCode)
        {
            return;
        }
        var TicketDevuelto = await response.Content.ReadFromJsonAsync<Tickets>();
        if (TicketDevuelto is not null)
        {
            Tickets = TicketDevuelto;
            StateHasChanged();
            Nuevo();
        }
    }


        public async Task Buscar()
    {
        var TicketEncontrado = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{Tickets.TicketId}");
        if (TicketEncontrado != null)
        {
            this.Tickets = TicketEncontrado;
            StateHasChanged();
        }
        else
        {

        }
    }

        public void AgregarDetalle()
    {
      if(!ValidarDetalle()) 
       {
        return;
       }
        Tickets.TicketsDetalle.Add(new TicketDetalle()
        {
                Emisor = EmisorTicket,
                Mensaje = MensajeTicket
        });
        EmisorTicket = string.Empty;
        MensajeTicket = string.Empty;
        StateHasChanged();
    }

        public void RemoverDetalle(TicketDetalle ticketDetalle)
    {
        EmisorTicket = ticketDetalle.Emisor;
        MensajeTicket = ticketDetalle.Mensaje;

        Tickets.TicketsDetalle.Remove(ticketDetalle);
    }

        public void Nuevo()
    {
        this.Tickets = new Tickets();
        Mensaje = string.Empty;

        EmisorTicket = string.Empty;
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Tickets/{Tickets.TicketId}");
        if (!response.IsSuccessStatusCode)
        {
            Mensaje = response.ReasonPhrase ?? "error";
            return;
        }
        else
            Nuevo();
    }


    public bool ValidarDetalle()
    {
        VD = string.Empty;
        if(string.IsNullOrWhiteSpace(EmisorTicket))
        {
            VD = "El nombre es obligatorio";
        }

        if(string.IsNullOrWhiteSpace(MensajeTicket))
        {
            VD += "El mensaje es obligatorio";
        }

        return VD.Length == 0;
    }
}